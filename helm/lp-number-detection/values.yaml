# Default values for lp-number-detection.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


frontend:
  replicaCount: 1
  name: frontend
  image:
    repository: geuntakroh/lp-number-frontend
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v0.1"
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8501
  # Configure config.yaml values. It will be created as configMap and will be mounted at application's config.yaml file
  # Please only touch mlis endpoint and tokens.
  appConfig:
    # api_host : "localhost:8000"
    api_host : lp-number-detection-backend.default.svc.cluster.local
    logo_url : "assets/hpe_pri_grn_pos_rgb.png"

  # Additional volumes on the output Deployment definition.
  volumes: 
    - name: config-volume
      configMap:
        items:
        - key: config.yaml
          path: config.yaml
        name: frontend-appconfig

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: 
    - name: config-volume
      mountPath: /app/config.yaml
      subPath: config.yaml

  livenessProbe:
    httpGet:
      path: /
      port: http
  readinessProbe:
    httpGet:
      path: /
      port: http

backend:
  replicaCount: 1
  name: backend
  image:
    repository: geuntakroh/lp-number-backend
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v0.1"
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8000

  appConfig:
    detectors:
      server_url: "./models"
      server_token: ""
      vehicle_detector : "yolo11s.pt" 
      license_detector : "yolo11s_20epochs_best.pt"

  # Additional volumes on the output Deployment definition.
  volumes: 
    - name: config-volume
      configMap:
        items:
        - key: config.yaml
          path: config.yaml
        name: backend-appconfig

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: 
    - name: config-volume
      mountPath: /app/config.yaml
      subPath: config.yaml


imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
